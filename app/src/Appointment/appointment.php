<?php
require_once realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php';

class Appointment {
    private $serviceId;
    private $employeeId;
    private $date;
    private $my_slot;
    private $client;
    private $sessionId;
    private $paymentStatus;
    private $paymentType;
    private $db;

    /**
     * @param $db
     * @param $serviceId
     * @param $employeeId
     * @param $date
     * @param $my_slot
     * @param $client
     * @param $sessionId
     * @param $paymentStatus
     * @param $paymentType
     */
    public function __construct($db, $serviceId, $employeeId, $date, $my_slot, Client $client, $sessionId, $paymentType, $paymentStatus) {
        $this->db = $db;
        $this->serviceId = $serviceId;
        $this->employeeId = $employeeId;
        $this->date = $date;
        $this->my_slot = $my_slot;
        $this->client = $client;
        $this->sessionId = $sessionId;
        $this->paymentStatus = $paymentStatus;
        $this->paymentType = $paymentType;
    }

    /**
     * @return mixed
     */
    public function getServiceId() {
        return $this->serviceId;
    }

    /**
     * @return mixed
     */
    public function getEmployeeId() {
        return $this->employeeId;
    }

    /**
     * @return mixed
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * @return mixed
     */
    public function getMySlot() {
        return $this->my_slot;
    }

    /**
     * @return mixed
     */
    public function getClient() {
        return $this->client;
    }

    /**
     * @return mixed
     */
    public function getSessionId() {
        return $this->sessionId;
    }

    /**
     * @return mixed
     */
    public function getPaymentStatus() {
        return $this->paymentStatus;
    }

    /**
     * @return mixed
     */
    public function getPaymentType() {
        return $this->paymentType;
    }

    /**
     * @return bool
     * @throws DatabaseException
     * @throws SlotException
     */
    public function book(): bool {
        require_once(realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php');
        // add the new client to the database
        $sql = "INSERT INTO `Cliente` (`id`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `Email`, `Cellulare`) VALUES (NULL, ?, ?, NULL, NULL, ?, ?)";
        $stmt = $this->db->prepare($sql);
        if (!$stmt) {
            throw DatabaseException::queryPrepareFailed();
        }
        // get all the data from the cliente object
        $nomeCliente = $this->client->getName();
        $cognomeCliente = $this->client->getSurname();
        $emailCliente = $this->client->getEmail();
        $cellulareCliente = $this->client->getPhone();
        // prepare the query
        if (!$stmt->bind_param('ssss', $nomeCliente, $cognomeCliente, $emailCliente, $cellulareCliente)) {
            throw DatabaseException::bindingParamsFailed();
        }
        if ($stmt->execute()) {
            //Query result is success
            $client_id = $stmt->insert_id;
            // check if the current request is generated by the api
            try {
                $slots = Slot::getSlots($this->db, $this->serviceId, $this->employeeId, $this->date);
            } catch (Exception $e){
                throw SlotException::unableToGetSlots();
            }
            $selected_slot = explode('-', $this->my_slot);
            $my_slot = array("start_time" => $selected_slot[0], "end_time" => $selected_slot[1]);
            $isAvailable = false;
            foreach ($slots as $s) {
                if ($s["start_time"] == $my_slot["start_time"] && $s["end_time"] == $my_slot["end_time"]) {
                    $isAvailable = true;
                    break;
                }
            }
            if ($isAvailable) {
                // slot presente tra quelli generati dall'api procedere con la prenotazione
                $sql = "INSERT INTO Appuntamento (id, Cliente_id, Servizio_id, Dipendente_id, Data, OraInizio, OraFine, Stato, SessionId, AddedAt, MetodoPagamento_id) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, UNIX_TIMESTAMP(), ?)";
                $stmt = $this->db->prepare($sql);
                if (!$stmt) {
                    throw DatabaseException::queryPrepareFailed();
                }
                if (!$stmt->bind_param('iiisssisi', $client_id, $this->serviceId, $this->employeeId, $this->date, $selected_slot[0], $selected_slot[1], $this->paymentStatus, $this->sessionId, $this->paymentType)) {
                    throw DatabaseException::bindingParamsFailed();
                }
                if ($stmt->execute()) {
                    //Success
                    return true;
                } else {
                    throw DatabaseException::queryExecutionFailed();
                }
            } else {
                // slot non esiste non inserire
                throw SlotException::inesistentSlot();
            }
        } else {
            throw DatabaseException::queryExecutionFailed();
        }
    }
}