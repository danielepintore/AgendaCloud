<?php
require_once realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php';

class Appointment {
    private int $serviceId;
    private int $employeeId;
    private string $date;
    private string $my_slot;
    private Client $client;
    private string $sessionId;
    private int $paymentStatus;
    private int $paymentType;
    private Database $db;
    private bool $isUserAuthenticated;

    /**
     * @param Database $db
     * @param $serviceId
     * @param $employeeId
     * @param $date
     * @param $my_slot
     * @param Client $client
     * @param $sessionId
     * @param $paymentType
     * @param $paymentStatus
     * @param bool $isUserAuthenticated
     */
    public function __construct(Database $db, $serviceId, $employeeId, $date, $my_slot, Client $client, $sessionId, $paymentType, $paymentStatus, $isUserAuthenticated = false) {
        $this->db = $db;
        $this->serviceId = $serviceId;
        $this->employeeId = $employeeId;
        $this->date = $date;
        $this->my_slot = $my_slot;
        $this->client = $client;
        $this->sessionId = $sessionId;
        $this->paymentStatus = $paymentStatus;
        $this->paymentType = $paymentType;
        $this->isUserAuthenticated = $isUserAuthenticated;
    }

    /**
     * @return int
     */
    public function getServiceId(): int {
        return $this->serviceId;
    }

    /**
     * @return int
     */
    public function getEmployeeId(): int {
        return $this->employeeId;
    }

    /**
     * @return string
     */
    public function getDate(): string {
        return $this->date;
    }

    /**
     * @return string
     */
    public function getMySlot(): string {
        return $this->my_slot;
    }

    /**
     * @return Client
     */
    public function getClient(): Client {
        return $this->client;
    }

    /**
     * @return string
     */
    public function getSessionId(): string {
        return $this->sessionId;
    }

    /**
     * @return int
     */
    public function getPaymentStatus(): int {
        return $this->paymentStatus;
    }

    /**
     * @return int
     */
    public function getPaymentType(): int {
        return $this->paymentType;
    }

    /**
     * @return bool
     * @throws DatabaseException
     * @throws SlotException
     * Book an appointment for a service in a slot, return true on success and false on failure
     */
    public function book(): bool {
        require_once(realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php');
        // get data from the client object
        $clientName = $this->client->getName();
        $clientSurname = $this->client->getSurname();
        $clientEmail = $this->client->getEmail();
        $clientPhone = $this->client->getPhone();
        // add the new client to the database
        $sql = "INSERT INTO `Cliente` (`id`, `Nome`, `Cognome`, `CodiceFiscale`, `DataNascita`, `Email`, `Cellulare`) VALUES (NULL, ?, ?, NULL, NULL, ?, ?)";
        $status = $this->db->query($sql, "ssss", $clientName, $clientSurname, $clientEmail, $clientPhone);
        if (!$status) {
            return false;
        }
        //Query result is success
        $client_id = $this->db->getInsertId();
        // check if the slot is available from the api
        try {
            $slots = Slot::getSlots($this->db, $this->serviceId, $this->employeeId, $this->date, $this->isUserAuthenticated);
        } catch (Exception $e){
            throw SlotException::unableToGetSlots();
        }
        $selected_slot = explode('-', $this->my_slot);
        $my_slot = array("startTime" => $selected_slot[0], "endTime" => $selected_slot[1]);
        $isAvailable = false;
        foreach ($slots as $s) {
            if ($s["startTime"] == $my_slot["startTime"] && $s["endTime"] == $my_slot["endTime"]) {
                $isAvailable = true;
                break;
            }
        }
        if ($isAvailable) {
            // the slot exists in the slot list generated by the api
            $sql = "INSERT INTO Appuntamento (id, Cliente_id, Servizio_id, Dipendente_id, Data, OraInizio, OraFine, Stato, SessionId, AddedAt, MetodoPagamento_id) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, UNIX_TIMESTAMP(), ?)";
            $status = $this->db->query($sql, "iiisssisi", $client_id, $this->serviceId, $this->employeeId, $this->date,
                $selected_slot[0], $selected_slot[1], $this->paymentStatus, $this->sessionId, $this->paymentType);
            if ($status) {
                //Success
                return true;
            }
        } else {
            // the slot doesn't exist in the list
            throw SlotException::inesistentSlot();
        }
        return false;
    }

    /**
     * @param Database $db
     * @param $session_id
     * @throws DatabaseException
     * @return bool
     * Given a session id, changes the status of the appointment to APPOINTMENT_CONFIRMED
     */
    public static function markAsPaid(Database $db, $session_id): bool {
        require_once(realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php');
        $sql = "UPDATE Appuntamento SET Stato = ? WHERE (SessionId = ? AND Stato = ?)";
        $status = $db->query($sql, "isi", APPOINTMENT_CONFIRMED, $session_id, PAYMENT_PENDING);
        if ($status) {
            return true;
        } else {
            // errore nell'aggiornamento dello stato del pagamento da parte del db
            throw DatabaseException::updateOrderStatus();
        }
    }

    /**
     * @param Database $db
     * @param $employeeId
     * @param $dateStr
     * @throws DatabaseException
     * @throws DateException
     * @return array{
     *     array{
     *      startTime: string,
     *      endTime: string
     *  }
     *}
     * Get all booked appointment slots given an employee id
     */
    public static function getBookedAppointment(Database $db, $employeeId, $dateStr): array {
        require_once(realpath(dirname(__FILE__, 3)) . '/vendor/autoload.php');
        // Get already booked slots for the service in the specified date
        $sql = "SELECT Appuntamento.OraInizio AS OraInizio, Appuntamento.OraFine AS OraFine FROM Appuntamento WHERE Appuntamento.Data = ? AND Appuntamento.Dipendente_id = ? AND Appuntamento.Stato != ? AND Appuntamento.Stato != ? AND Appuntamento.Stato != ?";
        $status = $db->query($sql, "siiii", $dateStr, $employeeId, PAYMENT_EXPIRED, REJECTED_BY_USER, CANCELED);
        if (!$status) {
            throw DatabaseException::confirmStatusIsFalse();
        }
        // Query succeed
        $result = $db->getResult();
        $bookedSlots = [];
        foreach ($result as $r) {
            try {
                $startDate = new DateTime($r["OraInizio"]);
                $endDate = new DateTime($r["OraFine"]);
                $bookedSlots[] = array("startTime" => $startDate->format('H:i'), "endTime" => $endDate->format('H:i'));
            } catch (Exception $e) {
                throw DateException::wrongStartOrEndTime();
            }
        }
        return $bookedSlots;
    }
}